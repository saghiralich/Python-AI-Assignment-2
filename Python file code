import heapq

graph = {
    'A': [('B', 2), ('C', 5)],
    'B': [('D', 4), ('E', 1)],
    'C': [('F', 2)],
    'D': [('G', 2)],
    'E': [('G', 3)],
    'F': [('G', 1)],
    'G': []
}

heuristic = {
    'A': 7, 'B': 6, 'C': 2, 'D': 4,
    'E': 3, 'F': 1, 'G': 0
}

def uniform_cost_search(start, goal):
    q = [(0, [start])]
    visited = set()
    explored = []
    nodes = 0
    while q:
        cost, path = heapq.heappop(q)
        node = path[-1]
        explored.append(node)
        if node == goal:
            return path, cost, explored, nodes
        if node not in visited:
            visited.add(node)
            nodes += 1
            for n, w in graph.get(node, []):
                heapq.heappush(q, (cost + w, path + [n]))
    return None, float('inf'), explored, nodes

def greedy_best_first_search(start, goal):
    q = [(heuristic[start], [start])]
    visited = set()
    explored = []
    nodes = 0
    while q:
        _, path = heapq.heappop(q)
        node = path[-1]
        explored.append(node)
        if node == goal:
            return path, explored, nodes
        if node not in visited:
            visited.add(node)
            nodes += 1
            for n, _ in graph.get(node, []):
                heapq.heappush(q, (heuristic[n], path + [n]))
    return None, explored, nodes

ucs_path, ucs_cost, ucs_explored, ucs_nodes = uniform_cost_search('A', 'G')
gbfs_path, gbfs_explored, gbfs_nodes = greedy_best_first_search('A', 'G')

print("==== Uniform Cost Search ====")
print("Path Explored:", ucs_explored)
print("Final Path:", ucs_path)
print("Total Cost:", ucs_cost)
print("Nodes Expanded:", ucs_nodes)

print("\n==== Greedy Best-First Search ====")
print("Path Explored:", gbfs_explored)
print("Final Path:", gbfs_path)
print("Nodes Expanded:", gbfs_nodes)
